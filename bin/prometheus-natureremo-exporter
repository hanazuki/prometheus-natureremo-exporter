#!/usr/bin/env ruby
$: << File.join(__dir__, '../lib')

require 'logger'
require 'optparse'
require 'prometheus/client'
require 'prometheus/client/formats/text'
require 'prometheus/natureremo_exporter'

logger = ::Logger.new(STDERR, level: Logger::Severity::INFO)
options = {
  output: nil,
  natureremo: {
  },
  listen_address: ':9800',
  telemetry_path: '/metrics'
}

OptionParser.new do |o|
  o.banner = 'natureremo_exporter [options]'

  o.on('-w', '--write [PATH]', :OPTIONAL, 'Write telemetry once and exit') {|v| options[:output] = v || :stdout }

  o.on('--log.level', 'Log level (default: INFO)') {|v| logger.level = Logger::Severity.const_get(v.upcase, false) }

  o.on('--natureremo.endpoint URI') {|v| options[:natureremo][:api_endpoint] = v }
  o.on('--natureremo.access-token [file:PATHNAME | env:VAR]', 'Nature Remo API token') do |v|
    token =
      case v
      when /\Afile:/
        File.read($').chomp
      when /\Aenv:/
        ENV.fetch($')
      else
        STDERR.puts 'Specify --natureremo.token in file:PATHNAME or env:VAR format'
        exit 1
      end

    if token.empty?
      STDERR.puts 'Token is empty'
      exit 1
    end

    options[:natureremo][:api_token] = token
  end

  o.on('--web.listen-address ADDR', 'Address to listen on for telemetry') {|v| options[:listen_address] = v }
  o.on('--web.telemetry-path PATH', 'Path under which to expose metrics') {|v| options[:telemetry_path] = v }
end.parse!(ARGV)

def collect_telemetry(logger, options)
  NatureRemoExporter.new(
    registry = Prometheus::Client::Registry.new,
    logger: logger,
    **options[:natureremo],
  ).update

  Prometheus::Client::Formats::Text.marshal(registry)
end

if output = options[:output]
  telemetry = collect_telemetry(logger, options)
  if output == :stdout
    puts telemetry
    exit
  end

  temp = "#{output}.#$$"
  begin
    File.write(temp, telemetry)
    File.rename(temp, output)
  ensure
    File.unlink(temp) rescue nil
  end
  exit
end

require 'webrick'
host, port = options.fetch(:listen_address).split(':', 2)
WEBrick::HTTPServer.new(
  BindAddress: host,
  Port: port,
  Logger: logger,
).tap do |server|
  server.mount_proc(options[:telemetry_path]) do |req, res|
    res['content-type'] = 'text/plain; version=0.0.4'
    res.body = collect_telemetry(logger, options)
  end
end.start
